C51 COMPILER V9.53.0.0   TIMER                                                             07/02/2018 16:33:05 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\c51.exe timer.c DB OE BR SMALL OPTIMIZE(11,SIZE) DEFINE(SILABS_PLATFORM_WMB912) 
                    -DEFINE(SILABS_WMCU_SI106x)

line level    source

   1          /*! @file timer.c
   2           * @brief This file contains the interface functions of the timers.
   3           *
   4           * @b COPYRIGHT
   5           * @n Silicon Laboratories Confidential
   6           * @n Copyright 2012 Silicon Laboratories, Inc.
   7           * @n http://www.silabs.com
   8           */
   9          
  10          #include "..\bsp.h"
  11          
  12          /*------------------------------------------------------------------------*/
  13          /*                          Global variables                              */
  14          /*------------------------------------------------------------------------*/
  15          
  16          SEGMENT_VARIABLE(wwTmr_Tmr2Periode , UU16, SEG_DATA) = {lTmr_Tmr2CntMax_c}; /**< Timer 2 period (1ms) */
  17          
  18          
  19          /*------------------------------------------------------------------------*/
  20          /*                          Function implementations                      */
  21          /*------------------------------------------------------------------------*/
  22          
  23          /*!
  24           * This function is used to start Timer 2 in the specified mode.
  25           *
  26           * @param[in] biPrescaler Prescaler value of timer (use predefined constants: bTmr_Tmr2One_c, bTmr_Tmr2Bot
             -h_c)
  27           * @param[in] wwiPeriod   The duration of the timing
  28           * @param[in] biItEnable  Enables timer IT if TRUE, disables it if FALSE
  29           * @param[in] biExtClkSel External clock select (use predefined constants: bTmr_TxXCLK_00_c etc.)
  30           *
  31           * @return  None.
  32           */
  33          void vTmr_StartTmr2(U8 biPrescaler, U16 wiPeriod, U8 biItEnable, U8 biExtClkSel)
  34          {
  35   1      
  36   1        //setup timer
  37   1        if (biPrescaler == eTmr_SysClk_c)
  38   1        {
  39   2          CKCON |= (M_T2MH | M_T2ML);
  40   2        }
  41   1        else
  42   1        {
  43   2          CKCON &= ~(M_T2MH | M_T2ML);
  44   2        }
  45   1        TMR2CN = biExtClkSel & M_T2XCLK;
  46   1      
  47   1        //set time period
  48   1        wiPeriod = 65535u - wiPeriod;
  49   1        TMR2 = wiPeriod;
  50   1        TMR2RL = wiPeriod;
  51   1      
  52   1        //enable IT if needed
  53   1        if (biItEnable)
C51 COMPILER V9.53.0.0   TIMER                                                             07/02/2018 16:33:05 PAGE 2   

  54   1        {
  55   2          mTmr_EnableTmr2It();
  56   2        }
  57   1        else
  58   1        {
  59   2          mTmr_DisableTmr2It();
  60   2        }
  61   1        mTmr_EnableTmr2();
  62   1      }
  63          
  64          #ifdef TIMER_DRIVER_EXTENDED_SUPPORT
              
              /*!
               * This function is used to check if Timer 2 is expired.
               *
               * @return  True if timer is expired (also stops the timer).
               * @note Function clears the IT status flag as well.
               */
              BIT gTmr_Tmr2Expired(void)
              {
                if( TF2H == 0)
                {
                  return FALSE;
                }
                else
                {
                  mTmr_StopTmr2();
                  return TRUE;
                }
              
              }
              
              /*!
               * This function is used to start Timer 3 in the specified mode.
               *
               * @param[in] biPrescaler Prescaler value of timer (use predefined constants: bTmr_Tmr3One_c, bTmr_Tmr3Bot
             -h_c)
               * @param[in] wiPeriod    The duration of the timing
               * @param[in] biItEnable  Enables timer IT if TRUE, disables it if FALSE
               * @param[in] biExtClkSel External clock select (use predefined constants: bTmr_TxXCLK_00_c etc.)
               *
               * @return  None.
               */
              void vTmr_StartTmr3(U8 biPrescaler, U16 wiPeriod, U8 biItEnable, U8 biExtClkSel)
              {
              
              #ifdef SILABS_MCU_F960
                SEGMENT_VARIABLE(bRestoreSfrPage, U8, SEG_DATA);
              
                bRestoreSfrPage = SFRPAGE;
                SFRPAGE = LEGACY_PAGE;
              #endif //#ifdef SILABS_MCU_F960
              
                /* Configure the timer3 operation */
                vTmr_StartTmr3_phaseConfigure(biPrescaler, wiPeriod, biItEnable, biExtClkSel, FALSE );
              
                vTmr_StartTmr3_phaseStart(wiPeriod);
              
              #ifdef SILABS_MCU_F960
                // Restore SFR page after SPI transfer
                SFRPAGE = bRestoreSfrPage;
              #endif //#ifdef SILABS_MCU_F960
C51 COMPILER V9.53.0.0   TIMER                                                             07/02/2018 16:33:05 PAGE 3   

              }
              
              
              /*!
               * This function is used to configure Timer 3 in the specified mode without starting it.
               *
               * @param[in] biPrescaler Prescaler value of timer (use predefined constants: bTmr_Tmr3One_c, bTmr_Tmr3Bot
             -h_c)
               * @param[in] wiPeriod    The duration of the timing
               * @param[in] biItEnable  Enables timer IT if TRUE, disables it if FALSE
               * @param[in] biExtClkSel External clock select (use predefined constants: bTmr_TxXCLK_00_c etc.)
               * @param[in] biSetItPriorityHigh If TRUE sets the Timer3 IT priority to High
               *
               * @return  None.
               */
              void vTmr_StartTmr3_phaseConfigure(U8 biPrescaler, U16 wiPeriod, U8 biItEnable, U8 biExtClkSel, U8 biSetIt
             -PriorityHigh)
              {
              
                if (biPrescaler == eTmr_SysClk_c)
                {
                  CKCON |= (M_T3MH | M_T3ML);
                }
                else
                {
                  CKCON &= ~(M_T3MH | M_T3ML);
                }
              
              #if 0 //TODO: Left here for debug purposes, remove if released
                /* Set T3 to run from SYSCLK */
                CKCON &= 0x3F;
                CKCON |= 0x40;
              #endif
              
                TMR3CN = biExtClkSel & M_T3XCLK;
              
              #if 0 //TODO: Left here for debug purposes, remove if released
                /* Reset Timer3 flags, Stop mode, AutoReload */
                TMR3CN = 0u;
              #endif
              
              
                wiPeriod = 65535u - wiPeriod;
                TMR3 = wiPeriod;
                TMR3RL = wiPeriod;
              
              #if 0 //TODO: Left here for debug purposes, remove if released
                /* Set Initial Value */
                TMR3 = Reload;
              
                /* Set Reload value */
                TMR3RL = Reload;
              #endif
              
                if ( biSetItPriorityHigh )
                {
                  /* Set Timer3 IT priority to High */
                  EIP1 |= 0x80;
                }
              
                //enable IT if needed
                if( biItEnable == 1 )
C51 COMPILER V9.53.0.0   TIMER                                                             07/02/2018 16:33:05 PAGE 4   

                {
                  mTmr_EnableTmr3It();
                }
                else
                {
                  mTmr_DisableTmr3It();
                }
              
              #if 0 //TODO: Left here for debug purposes, remove if released
                /* Enable Timer3 IT */
                EIE1 |= 0x80;
              #endif
              
              }
              
              
              /**
               *  Starts Timer3 HW peripheral
               *
               *  @param Reload Timer Reload Value
               *
               *  @author Sz. Papp
               *
               *  @note
               *
               *****************************************************************************/
              void vTmr_StartTmr3_phaseStart(U16 wiPeriod)
              {
                /* Set Reload value */
                wiPeriod = 65535u - wiPeriod;
                TMR3RL = wiPeriod;
              
                mTmr_EnableTmr3();
              
              #if 0 //TODO: Left here for debug purposes, remove if released
                /* Start Timer3 */
                TMR3CN |= 0x04;
              #endif
              }
              
              
              
              /*!
               * This function is used to check if Timer 3 is expired.
               *
               * @return  True if timer is expired (also stops the timer).
               * @note Function clears the IT status flag as well.
               */
              
              BIT gTmr_Tmr3Expired(void)
              {
              #ifdef SILABS_MCU_F960
                SEGMENT_VARIABLE(bRestoreSfrPage, U8, SEG_DATA);
              
                bRestoreSfrPage = SFRPAGE;
                SFRPAGE = LEGACY_PAGE;
              #endif //#ifdef SILABS_MCU_F960
              
                if( (TMR3CN & M_TF3H) == 0)
                {
                  return 0;
                }
C51 COMPILER V9.53.0.0   TIMER                                                             07/02/2018 16:33:05 PAGE 5   

                else
                {
                  mTmr_StopTmr3();
                  return 1;
                }
              
              #ifdef SILABS_MCU_F960
                // Restore SFR page after SPI transfer
                SFRPAGE = bRestoreSfrPage;
              #endif //#ifdef SILABS_MCU_F960
              }
              
              #endif //#ifdef TIMER_DRIVER_EXTENDED_SUPPORT
 250          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     51    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
