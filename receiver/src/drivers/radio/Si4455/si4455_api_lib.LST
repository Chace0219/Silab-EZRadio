C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SI4455_API_LIB
OBJECT MODULE PLACED IN si4455_api_lib.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\c51.exe si4455_api_lib.c DB OE BR SMALL OPTIMIZE(11,SIZE) DEFINE(SILABS_PLATFORM
                    -_WMB912) DEFINE(SILABS_WMCU_SI106x)

line level    source

   1          /*!
   2           * File:
   3           *  si4455_api_lib.c
   4           *
   5           * Description:
   6           *  This file contains the Si4455 API library.
   7           *
   8           * Silicon Laboratories Confidential
   9           * Copyright 2011 Silicon Laboratories, Inc.
  10           */
  11          
  12          #include "..\..\..\bsp.h"
  13          #include <stdarg.h>
  14          
  15          #define SI4455_USER_CONFIG_XTAL_FREQ 30000000L
  16          SEGMENT_VARIABLE( Si4455Cmd, union si4455_cmd_reply_union, SEG_XDATA );
  17          SEGMENT_VARIABLE( radioCmd[16u], U8, SEG_XDATA );
  18          
  19          
  20          /*!
  21           * This functions is used to reset the si4455 radio by applying shutdown and
  22           * releasing it.  After this function @ref si4455_boot should be called.  You
  23           * can check if POR has completed by waiting 4 ms or by polling GPIO 0, 2, or 3.
  24           * When these GPIOs are high, it is safe to call @ref si4455_boot.
  25           */
  26          void si4455_reset(void)
  27          {
  28   1          U8 loopCount;
  29   1      
  30   1          /* Put radio in shutdown, wait then release */
  31   1          radio_hal_AssertShutdown();
  32   1          //! @todo this needs to be a better delay function.
  33   1          for (loopCount = 255; loopCount != 0; loopCount--);
  34   1          radio_hal_DeassertShutdown();
  35   1          for (loopCount = 255; loopCount != 0; loopCount--);
  36   1          radio_comm_ClearCTS();
  37   1      }
  38          
  39          void si4455_power_up(U8 BOOT_OPTIONS, U8 XTAL_OPTIONS, U32 XO_FREQ)
  40          {
  41   1          radioCmd[0] = SI4455_CMD_ID_POWER_UP;
  42   1          radioCmd[1] = BOOT_OPTIONS;
  43   1          radioCmd[2] = XTAL_OPTIONS;
  44   1          radioCmd[3] = (U8)(XO_FREQ >> 24);
  45   1          radioCmd[4] = (U8)(XO_FREQ >> 16);
  46   1          radioCmd[5] = (U8)(XO_FREQ >> 8);
  47   1          radioCmd[6] = (U8)(XO_FREQ);
  48   1      
  49   1          radio_comm_SendCmd( SI4455_CMD_ARG_COUNT_POWER_UP, radioCmd );
  50   1      }
  51          
  52          /*!
  53           * This function is used to load all properties and commands with a list of NULL terminated commands.
  54           * Before this function @si446x_reset should be called.
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 2   

  55           */
  56          U8 si4455_configuration_init(const U8* pSetPropCmd)
  57          {
  58   1        SEGMENT_VARIABLE(col, U8, SEG_DATA);
  59   1        SEGMENT_VARIABLE(response, U8, SEG_DATA);
  60   1        SEGMENT_VARIABLE(numOfBytes, U8, SEG_DATA);
  61   1      
  62   1        /* While cycle as far as the pointer points to a command */
  63   1        while (*pSetPropCmd != 0x00)
  64   1        {
  65   2          /* Commands structure in the array:
  66   2           * --------------------------------
  67   2           * LEN | <LEN length of data>
  68   2           */
  69   2      
  70   2          numOfBytes = *pSetPropCmd++;
  71   2      
  72   2          if (numOfBytes > 16u)
  73   2          {
  74   3              /* Initial configuration of Si4x55 */
  75   3              if ( SI4455_CMD_ID_WRITE_TX_FIFO == *pSetPropCmd ) 
  76   3              {
  77   4                  if (numOfBytes > 128u)
  78   4                  {
  79   5                      /* Number of command bytes exceeds maximal allowable length */
  80   5                      return SI4455_COMMAND_ERROR;
  81   5                  }
  82   4                  
  83   4                  /* Load array to the device */
  84   4                  pSetPropCmd++;
  85   4                  si4455_write_ezconfig_array( numOfBytes - 1, pSetPropCmd);
  86   4                  
  87   4                  /* Point to the next command */
  88   4                  pSetPropCmd += numOfBytes - 1;
  89   4                  
  90   4                  /* Continue command interpreter */
  91   4                  continue;
  92   4                  
  93   4              }
  94   3              else
  95   3              {
  96   4                  /* Number of command bytes exceeds maximal allowable length */
  97   4                  return SI4455_COMMAND_ERROR;
  98   4              }
  99   3          }
 100   2      
 101   2          for (col = 0u; col < numOfBytes; col++)
 102   2          {
 103   3            radioCmd[col] = *pSetPropCmd;
 104   3            pSetPropCmd++;
 105   3          }
 106   2      
 107   2          if (radio_comm_SendCmdGetResp(numOfBytes, radioCmd, 1, &response) != 0xFF)
 108   2          {
 109   3            /* Timeout occured */
 110   3            return SI4455_CTS_TIMEOUT;
 111   3          }
 112   2      
 113   2          /* Check response byte of EZCONFIG_CHECK command */
 114   2          if ( SI4455_CMD_ID_EZCONFIG_CHECK == radioCmd[0] ) 
 115   2          {
 116   3              if (response)
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 3   

 117   3              {
 118   4                  /* Number of command bytes exceeds maximal allowable length */
 119   4                  return SI4455_COMMAND_ERROR;
 120   4              }    
 121   3          }
 122   2          
 123   2          if (radio_hal_NirqLevel() == 0)
 124   2          {
 125   3            /* Get and clear all interrupts.  An error has occured... */
 126   3            si4455_get_int_status(0, 0, 0);
 127   3            if (Si4455Cmd.GET_INT_STATUS.CHIP_PEND & SI4455_CMD_GET_CHIP_STATUS_REP_CMD_ERROR_PEND_MASK)
 128   3            {
 129   4              return SI4455_COMMAND_ERROR;
 130   4            }
 131   3          }
 132   2        }
 133   1      
 134   1        return SI4455_SUCCESS;
 135   1      }
 136          
 137          void si4455_write_ezconfig_array(U8 numBytes, U8* pEzConfigArray)
 138          {
 139   1        radio_comm_WriteData(SI4455_CMD_ID_WRITE_TX_FIFO, 1, numBytes, pEzConfigArray);
 140   1      }
 141          
 142          void si4455_ezconfig_check(U16 CHECKSUM)
 143          {
 144   1        /* Do not check CTS */
 145   1      
 146   1        radio_hal_ClearNsel();
 147   1      
 148   1        /* Command byte */
 149   1        radio_hal_SpiWriteByte(SI4455_CMD_ID_EZCONFIG_CHECK);
 150   1      
 151   1        /* CRC */
 152   1        radio_hal_SpiWriteByte((U16) CHECKSUM >> 8u);
 153   1        radio_hal_SpiWriteByte((U16) CHECKSUM & 0x00FF);
 154   1      
 155   1        radio_hal_SetNsel();
 156   1      
 157   1        /* Get the respoonse from the radio chip */
 158   1        radio_comm_GetResp(1u, radioCmd);
 159   1      }
 160          
 161          void si4455_start_tx(U8 CHANNEL, U8 CONDITION, U16 TX_LEN)
 162          {
 163   1          radioCmd[0] = SI4455_CMD_ID_START_TX;
 164   1          radioCmd[1] = CHANNEL;
 165   1          radioCmd[2] = CONDITION;
 166   1          radioCmd[3] = (U8)(TX_LEN >> 8);
 167   1          radioCmd[4] = (U8)(TX_LEN);
 168   1      
 169   1          radio_comm_SendCmd( SI4455_CMD_ARG_COUNT_START_TX, radioCmd );
 170   1      }
 171          
 172          void si4455_start_rx(U8 CHANNEL, U8 CONDITION, U16 RX_LEN, U8 NEXT_STATE1, U8 NEXT_STATE2, U8 NEXT_STATE3)
 173          {
 174   1          radioCmd[0] = SI4455_CMD_ID_START_RX;
 175   1          radioCmd[1] = CHANNEL;
 176   1          radioCmd[2] = CONDITION;
 177   1          radioCmd[3] = (U8)(RX_LEN >> 8);
 178   1          radioCmd[4] = (U8)(RX_LEN);
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 4   

 179   1          radioCmd[5] = NEXT_STATE1;
 180   1          radioCmd[6] = NEXT_STATE2;
 181   1          radioCmd[7] = NEXT_STATE3;
 182   1      
 183   1          radio_comm_SendCmd( SI4455_CMD_ARG_COUNT_START_RX, radioCmd );
 184   1      }
 185          
 186          void si4455_get_int_status(U8 PH_CLR_PEND, U8 MODEM_CLR_PEND, U8 CHIP_CLR_PEND)
 187          {
 188   1          radioCmd[0] = SI4455_CMD_ID_GET_INT_STATUS;
 189   1          radioCmd[1] = PH_CLR_PEND;
 190   1          radioCmd[2] = MODEM_CLR_PEND;
 191   1          radioCmd[3] = CHIP_CLR_PEND;
 192   1      
 193   1          radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GET_INT_STATUS,
 194   1                                    radioCmd,
 195   1                                    SI4455_CMD_REPLY_COUNT_GET_INT_STATUS,
 196   1                                    radioCmd );
 197   1      
 198   1          Si4455Cmd.GET_INT_STATUS.INT_PEND       = radioCmd[0];
 199   1          Si4455Cmd.GET_INT_STATUS.INT_STATUS     = radioCmd[1];
 200   1          Si4455Cmd.GET_INT_STATUS.PH_PEND        = radioCmd[2];
 201   1          Si4455Cmd.GET_INT_STATUS.PH_STATUS      = radioCmd[3];
 202   1          Si4455Cmd.GET_INT_STATUS.MODEM_PEND     = radioCmd[4];
 203   1          Si4455Cmd.GET_INT_STATUS.MODEM_STATUS   = radioCmd[5];
 204   1          Si4455Cmd.GET_INT_STATUS.CHIP_PEND      = radioCmd[6];
 205   1          Si4455Cmd.GET_INT_STATUS.CHIP_STATUS    = radioCmd[7];
 206   1      }
 207          
 208          void si4455_gpio_pin_cfg(U8 GPIO0, U8 GPIO1, U8 GPIO2, U8 GPIO3, U8 NIRQ, U8 SDO, U8 GEN_CONFIG)
 209          {
 210   1          radioCmd[0] = SI4455_CMD_ID_GPIO_PIN_CFG;
 211   1          radioCmd[1] = GPIO0;
 212   1          radioCmd[2] = GPIO1;
 213   1          radioCmd[3] = GPIO2;
 214   1          radioCmd[4] = GPIO3;
 215   1          radioCmd[5] = NIRQ;
 216   1          radioCmd[6] = SDO;
 217   1          radioCmd[7] = GEN_CONFIG;
 218   1      
 219   1          radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GPIO_PIN_CFG,
 220   1                                    radioCmd,
 221   1                                    SI4455_CMD_REPLY_COUNT_GPIO_PIN_CFG,
 222   1                                    radioCmd );
 223   1      
 224   1          Si4455Cmd.GPIO_PIN_CFG.GPIO0        = radioCmd[0];
 225   1          Si4455Cmd.GPIO_PIN_CFG.GPIO1        = radioCmd[1];
 226   1          Si4455Cmd.GPIO_PIN_CFG.GPIO2        = radioCmd[2];
 227   1          Si4455Cmd.GPIO_PIN_CFG.GPIO3        = radioCmd[3];
 228   1          Si4455Cmd.GPIO_PIN_CFG.NIRQ         = radioCmd[4];
 229   1          Si4455Cmd.GPIO_PIN_CFG.SDO          = radioCmd[5];
 230   1          Si4455Cmd.GPIO_PIN_CFG.GEN_CONFIG   = radioCmd[6];
 231   1      }
 232          
 233          #ifdef __C51__
 234          #pragma maxargs (13)  /* allow 13 bytes for parameters */
 235          #endif
 236          void si4455_set_property( U8 GROUP, U8 NUM_PROPS, U8 START_PROP, ... )
 237          {
 238   1          va_list argList;
 239   1          U8 cmdIndex;
 240   1      
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 5   

 241   1          radioCmd[0] = SI4455_CMD_ID_SET_PROPERTY;
 242   1          radioCmd[1] = GROUP;
 243   1          radioCmd[2] = NUM_PROPS;
 244   1          radioCmd[3] = START_PROP;
 245   1      
 246   1          va_start (argList, START_PROP);
 247   1          cmdIndex = 4;
 248   1          while(NUM_PROPS--)
 249   1          {
 250   2              radioCmd[cmdIndex] = va_arg (argList, U8);
 251   2              cmdIndex++;
 252   2          }
 253   1          va_end(argList);
 254   1      
 255   1          radio_comm_SendCmd( cmdIndex, radioCmd );
 256   1      }
 257          
 258          void si4455_change_state(U8 NEXT_STATE1)
 259          {
 260   1          radioCmd[0] = SI4455_CMD_ID_CHANGE_STATE;
 261   1          radioCmd[1] = NEXT_STATE1;
 262   1      
 263   1          radio_comm_SendCmd( SI4455_CMD_ARG_COUNT_CHANGE_STATE, radioCmd );
 264   1      }
 265          
 266          #ifdef RADIO_DRIVER_EXTENDED_SUPPORT
 267          void si4455_nop(void)
 268          {
 269   1          radioCmd[0] = SI4455_CMD_ID_NOP;
 270   1      
 271   1          radio_comm_SendCmd( SI4455_CMD_ARG_COUNT_NOP, radioCmd );
 272   1      }
 273          
 274          void si4455_fifo_info(U8 FIFO)
 275          {
 276   1          radioCmd[0] = SI4455_CMD_ID_FIFO_INFO;
 277   1          radioCmd[1] = FIFO;
 278   1      
 279   1          radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_FIFO_INFO,
 280   1                                    radioCmd,
 281   1                                    SI4455_CMD_REPLY_COUNT_FIFO_INFO,
 282   1                                    radioCmd );
 283   1      
 284   1          Si4455Cmd.FIFO_INFO.RX_FIFO_COUNT   = radioCmd[0];
 285   1          Si4455Cmd.FIFO_INFO.TX_FIFO_SPACE   = radioCmd[1];
 286   1      }
 287          
 288          void si4455_part_info(void)
 289          {
 290   1          radioCmd[0] = SI4455_CMD_ID_PART_INFO;
 291   1      
 292   1          radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_PART_INFO,
 293   1                                    radioCmd,
 294   1                                    SI4455_CMD_REPLY_COUNT_PART_INFO,
 295   1                                    radioCmd );
 296   1      
 297   1          Si4455Cmd.PART_INFO.CHIPREV         = radioCmd[0];
 298   1          Si4455Cmd.PART_INFO.PART.U8[MSB]    = radioCmd[1];
 299   1          Si4455Cmd.PART_INFO.PART.U8[LSB]    = radioCmd[2];
 300   1          Si4455Cmd.PART_INFO.PBUILD          = radioCmd[3];
 301   1          Si4455Cmd.PART_INFO.ID.U8[MSB]      = radioCmd[4];
 302   1          Si4455Cmd.PART_INFO.ID.U8[LSB]      = radioCmd[5];
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 6   

 303   1          Si4455Cmd.PART_INFO.CUSTOMER        = radioCmd[6];
 304   1          Si4455Cmd.PART_INFO.ROMID           = radioCmd[7];
 305   1          Si4455Cmd.PART_INFO.BOND            = radioCmd[8];
 306   1      }
 307          
 308          void si4455_write_tx_fifo(U8 numBytes, U8* pTxData)
 309          {
 310   1          radio_comm_WriteData( SI4455_CMD_ID_WRITE_TX_FIFO, 0, numBytes, pTxData );
 311   1      }
 312          
 313          void si4455_read_rx_fifo(U8 numBytes, U8* pRxData)
 314          {
 315   1          radio_comm_ReadData( SI4455_CMD_ID_READ_RX_FIFO, 0, numBytes, pRxData );
 316   1      }
 317          
 318          void si4455_get_property(U8 GROUP, U8 NUM_PROPS, U8 START_PROP)
 319          {
 320   1          radioCmd[0] = SI4455_CMD_ID_GET_PROPERTY;
 321   1          radioCmd[1] = GROUP;
 322   1          radioCmd[2] = NUM_PROPS;
 323   1          radioCmd[3] = START_PROP;
 324   1      
 325   1          radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GET_PROPERTY,
 326   1                                    radioCmd,
 327   1                                    radioCmd[2],
 328   1                                    radioCmd );
 329   1      
 330   1          Si4455Cmd.GET_PROPERTY.DATA0    = radioCmd[0];
 331   1          Si4455Cmd.GET_PROPERTY.DATA1    = radioCmd[1];
 332   1          Si4455Cmd.GET_PROPERTY.DATA2    = radioCmd[2];
 333   1          Si4455Cmd.GET_PROPERTY.DATA3    = radioCmd[3];
 334   1          Si4455Cmd.GET_PROPERTY.DATA4    = radioCmd[4];
 335   1          Si4455Cmd.GET_PROPERTY.DATA5    = radioCmd[5];
 336   1          Si4455Cmd.GET_PROPERTY.DATA6    = radioCmd[6];
 337   1          Si4455Cmd.GET_PROPERTY.DATA7    = radioCmd[7];
 338   1          Si4455Cmd.GET_PROPERTY.DATA8    = radioCmd[8];
 339   1          Si4455Cmd.GET_PROPERTY.DATA9    = radioCmd[9];
 340   1          Si4455Cmd.GET_PROPERTY.DATA10   = radioCmd[10];
 341   1          Si4455Cmd.GET_PROPERTY.DATA11   = radioCmd[11];
 342   1          Si4455Cmd.GET_PROPERTY.DATA12   = radioCmd[12];
 343   1          Si4455Cmd.GET_PROPERTY.DATA13   = radioCmd[13];
 344   1          Si4455Cmd.GET_PROPERTY.DATA14   = radioCmd[14];
 345   1          Si4455Cmd.GET_PROPERTY.DATA15   = radioCmd[15];
 346   1      }
 347          
 348          #ifdef RADIO_DRIVER_FULL_SUPPORT
              void si4455_func_info(void)
              {
                  radioCmd[0] = SI4455_CMD_ID_FUNC_INFO;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_FUNC_INFO,
                                            radioCmd,
                                            SI4455_CMD_REPLY_COUNT_FUNC_INFO,
                                            radioCmd );
              
                  Si4455Cmd.FUNC_INFO.REVEXT          = radioCmd[0];
                  Si4455Cmd.FUNC_INFO.REVBRANCH       = radioCmd[1];
                  Si4455Cmd.FUNC_INFO.REVINT          = radioCmd[2];
                  Si4455Cmd.FUNC_INFO.PATCH.U8[MSB]   = radioCmd[3];
                  Si4455Cmd.FUNC_INFO.PATCH.U8[LSB]   = radioCmd[4];
                  Si4455Cmd.FUNC_INFO.FUNC            = radioCmd[5];
                  Si4455Cmd.FUNC_INFO.SVNFLAGS        = radioCmd[6];
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 7   

                  Si4455Cmd.FUNC_INFO.SVNREV.U8[b3]   = radioCmd[7];
                  Si4455Cmd.FUNC_INFO.SVNREV.U8[b2]   = radioCmd[8];
                  Si4455Cmd.FUNC_INFO.SVNREV.U8[b1]   = radioCmd[9];
                  Si4455Cmd.FUNC_INFO.SVNREV.U8[b0]   = radioCmd[10];
              }
              
              void si4455_frr_a_read(U8 respByteCount)
              {
                  radio_comm_ReadData(SI4455_CMD_ID_FRR_A_READ,
                                          0,
                                      respByteCount,
                                      radioCmd);
              
                  Si4455Cmd.FRR_A_READ.FRR_A_VALUE = radioCmd[0];
                  Si4455Cmd.FRR_A_READ.FRR_B_VALUE = radioCmd[1];
                  Si4455Cmd.FRR_A_READ.FRR_C_VALUE = radioCmd[2];
                  Si4455Cmd.FRR_A_READ.FRR_D_VALUE = radioCmd[3];
              }
              
              
              void si4455_frr_b_read(U8 respByteCount)
              {
                  radio_comm_ReadData(SI4455_CMD_ID_FRR_B_READ,
                                          0,
                                      respByteCount,
                                      radioCmd);
              
                  Si4455Cmd.FRR_B_READ.FRR_B_VALUE = radioCmd[0];
                  Si4455Cmd.FRR_B_READ.FRR_C_VALUE = radioCmd[1];
                  Si4455Cmd.FRR_B_READ.FRR_D_VALUE = radioCmd[2];
                  Si4455Cmd.FRR_B_READ.FRR_A_VALUE = radioCmd[3];
              }
              
              
              void si4455_frr_c_read(U8 respByteCount)
              {
                  radio_comm_ReadData(SI4455_CMD_ID_FRR_C_READ,
                                          0,
                                      respByteCount,
                                      radioCmd);
              
                  Si4455Cmd.FRR_C_READ.FRR_C_VALUE = radioCmd[0];
                  Si4455Cmd.FRR_C_READ.FRR_D_VALUE = radioCmd[1];
                  Si4455Cmd.FRR_C_READ.FRR_A_VALUE = radioCmd[2];
                  Si4455Cmd.FRR_C_READ.FRR_B_VALUE = radioCmd[3];
              }
              
              
              void si4455_frr_d_read(U8 respByteCount)
              {
                  radio_comm_ReadData(SI4455_CMD_ID_FRR_D_READ,
                                          0,
                                      respByteCount,
                                      radioCmd);
              
                  Si4455Cmd.FRR_D_READ.FRR_D_VALUE = radioCmd[0];
                  Si4455Cmd.FRR_D_READ.FRR_A_VALUE = radioCmd[1];
                  Si4455Cmd.FRR_D_READ.FRR_B_VALUE = radioCmd[2];
                  Si4455Cmd.FRR_D_READ.FRR_C_VALUE = radioCmd[3];
              }
              
              void si4455_request_device_state(void)
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 8   

              {
                  radioCmd[0] = SI4455_CMD_ID_REQUEST_DEVICE_STATE;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_REQUEST_DEVICE_STATE,
                                            radioCmd,
                                            SI4455_CMD_REPLY_COUNT_REQUEST_DEVICE_STATE,
                                            radioCmd );
              
                  Si4455Cmd.REQUEST_DEVICE_STATE.CURR_STATE       = radioCmd[0];
                  Si4455Cmd.REQUEST_DEVICE_STATE.CURRENT_CHANNEL  = radioCmd[1];
              }
              
              void si4455_read_cmd_buff(void)
              {
                  radioCmd[0] = SI4455_CMD_ID_READ_CMD_BUFF;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_READ_CMD_BUFF,
                                             radioCmd,
                                             SI4455_CMD_REPLY_COUNT_READ_CMD_BUFF,
                                             radioCmd );
              
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF0   = radioCmd[0];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF1   = radioCmd[1];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF2   = radioCmd[2];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF3   = radioCmd[3];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF4   = radioCmd[4];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF5   = radioCmd[5];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF6   = radioCmd[6];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF7   = radioCmd[7];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF8   = radioCmd[8];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF9   = radioCmd[9];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF10  = radioCmd[10];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF11  = radioCmd[11];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF12  = radioCmd[12];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF13  = radioCmd[13];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF14  = radioCmd[14];
                  Si4455Cmd.READ_CMD_BUFF.CMD_BUFF15  = radioCmd[15];
              }
              
              
              void si4455_get_adc_reading(U8 ADC_EN, U8 ADC_CFG)
              {
                  radioCmd[0] = SI4455_CMD_ID_GET_ADC_READING;
                  radioCmd[1] = ADC_EN;
                  radioCmd[2] = ADC_CFG;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GET_ADC_READING,
                                            radioCmd,
                                            SI4455_CMD_REPLY_COUNT_GET_ADC_READING,
                                            radioCmd );
              
                  Si4455Cmd.GET_ADC_READING.GPIO_ADC.U8[MSB]      = radioCmd[0];
                  Si4455Cmd.GET_ADC_READING.GPIO_ADC.U8[LSB]      = radioCmd[1];
                  Si4455Cmd.GET_ADC_READING.BATTERY_ADC.U8[MSB]   = radioCmd[2];
                  Si4455Cmd.GET_ADC_READING.BATTERY_ADC.U8[LSB]   = radioCmd[3];
                  Si4455Cmd.GET_ADC_READING.TEMP_ADC.U8[MSB]      = radioCmd[4];
                  Si4455Cmd.GET_ADC_READING.TEMP_ADC.U8[LSB]      = radioCmd[5];
                  Si4455Cmd.GET_ADC_READING.TEMP_SLOPE            = radioCmd[6];
                  Si4455Cmd.GET_ADC_READING.TEMP_INTERCEPT        = radioCmd[7];
              }
              
              
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 9   

              void si4455_get_ph_status(U8 PH_CLR_PEND)
              {
                  radioCmd[0] = SI4455_CMD_ID_GET_PH_STATUS;
                  radioCmd[1] = PH_CLR_PEND;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GET_PH_STATUS,
                                            radioCmd,
                                            SI4455_CMD_REPLY_COUNT_GET_PH_STATUS,
                                            radioCmd );
              
                  Si4455Cmd.GET_PH_STATUS.PH_PEND        = radioCmd[0];
                  Si4455Cmd.GET_PH_STATUS.PH_STATUS      = radioCmd[1];
              }
              
              
              void si4455_get_modem_status( U8 MODEM_CLR_PEND )
              {
                  radioCmd[0] = SI4455_CMD_ID_GET_MODEM_STATUS;
                  radioCmd[1] = MODEM_CLR_PEND;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GET_MODEM_STATUS,
                                            radioCmd,
                                            SI4455_CMD_REPLY_COUNT_GET_MODEM_STATUS,
                                            radioCmd );
              
                  Si4455Cmd.GET_MODEM_STATUS.MODEM_PEND   = radioCmd[0];
                  Si4455Cmd.GET_MODEM_STATUS.MODEM_STATUS = radioCmd[1];
                  Si4455Cmd.GET_MODEM_STATUS.CURR_RSSI    = radioCmd[2];
                  Si4455Cmd.GET_MODEM_STATUS.LATCH_RSSI   = radioCmd[3];
                  Si4455Cmd.GET_MODEM_STATUS.ANT1_RSSI    = radioCmd[4];
                  Si4455Cmd.GET_MODEM_STATUS.ANT2_RSSI    = radioCmd[5];
                  Si4455Cmd.GET_MODEM_STATUS.AFC_FREQ_OFFSET.U8[MSB]  = radioCmd[6];
                  Si4455Cmd.GET_MODEM_STATUS.AFC_FREQ_OFFSET.U8[LSB]  = radioCmd[7];
              }
              
              
              void si4455_get_chip_status( U8 CHIP_CLR_PEND )
              {
                  radioCmd[0] = SI4455_CMD_ID_GET_CHIP_STATUS;
                  radioCmd[1] = CHIP_CLR_PEND;
              
                  radio_comm_SendCmdGetResp( SI4455_CMD_ARG_COUNT_GET_CHIP_STATUS,
                                            radioCmd,
                                            SI4455_CMD_REPLY_COUNT_GET_CHIP_STATUS,
                                            radioCmd );
              
                  Si4455Cmd.GET_CHIP_STATUS.CHIP_PEND         = radioCmd[0];
                  Si4455Cmd.GET_CHIP_STATUS.CHIP_STATUS       = radioCmd[1];
                  Si4455Cmd.GET_CHIP_STATUS.CMD_ERR_STATUS    = radioCmd[2];
              }
              
              
              #endif
 542          
 543          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    841    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   SI4455_API_LIB                                                    07/02/2018 16:33:06 PAGE 10  

   DATA SIZE        =   ----      46
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
